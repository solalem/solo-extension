import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { useForm } from "react-hook-form";
import { yupResolver } from '@hookform/resolvers/yup';
import * as Yup from 'yup';

import { {{camel entity.name}}Service, alertService } from '@/_services';

function AddEdit{{entity.name}}({ history, match }) {
    const { id } = match.params;
    const isAddMode = !id;
    
    // form validation rules 
    const validationSchema = Yup.object().shape({
{{#each entity.properties}}
        {{camel this.name}}: Yup.string()
            .required('{{this.name}} is required'),
{{/each}}
    });

    // functions to build form returned by useForm() hook
    const { register, handleSubmit, reset, setValue, errors, formState } = useForm({
        resolver: yupResolver(validationSchema)
    });

    function onSubmit(data) {
        return isAddMode
            ? create{{entity.name}}(data)
            : update{{entity.name}}(id, data);
    }

    function create{{entity.name}}(data) {
        return {{camel entity.name}}Service.create(data)
            .then(() => {
                alertService.success('{{entity.name}} added', { keepAfterRouteChange: true });
                history.push('.');
            })
            .catch(alertService.error);
    }

    function update{{entity.name}}(id, data) {
        return {{camel entity.name}}Service.update(id, data)
            .then(() => {
                alertService.success('{{entity.name}} updated', { keepAfterRouteChange: true });
                history.push('..');
            })
            .catch(alertService.error);
    }

    const [{{camel entity.name}}, set{{entity.name}}] = useState({});
    const [showPassword, setShowPassword] = useState(false);

    useEffect(() => {
        if (!isAddMode) {
            // get {{entity.name}} and set form fields
            {{camel entity.name}}Service.getById(id).then({{camel entity.name}} => {
                const fields = ['name', 'email'];
                fields.forEach(field => setValue(field, {{camel entity.name}}[field]));
                set{{entity.name}}({{camel entity.name}});
            });
        }
    }, []);

    return (
        <form onSubmit={handleSubmit(onSubmit)} onReset={reset}>
            <h1>{isAddMode ? 'Add {{entity.name}}' : 'Edit {{entity.name}}'}</h1>
{{#each entity.properties}}
            <div className="form-row">
                <div className="form-group col-5">
                    <label>{{this.name}}</label>
                    <input name="name" type="text" ref={register} className={`form-control ${errors.name ? 'is-invalid' : ''}`} />
                    <div className="invalid-feedback">{errors.{{camel this.name}}?.message}</div>
                </div>
            </div>
{{/each}}

            <div className="form-group">
                <button type="submit" disabled={formState.isSubmitting} className="btn btn-primary">
                    {formState.isSubmitting && <span className="spinner-border spinner-border-sm mr-1"></span>}
                    Save
                </button>
                <Link to={isAddMode ? '.' : '..'} className="btn btn-link">Cancel</Link>
            </div>
        </form>
    );
}

export { AddEdit{{entity.name}} };